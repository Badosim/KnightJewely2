Main
package com.example.myapplication;
import static com.example.myapplication.Constants.drawY;
import static com.example.myapplication.Constants.cellWidth;
import static com.example.myapplication.Constants.drawX;
import static com.example.myapplication.Constants.screenHeight;
import static com.example.myapplication.Constants.screenWidth;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import android.widget.FrameLayout;

import  com.example.myapplication.Constants.*;
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
        screenWidth= dm.widthPixels;
        screenHeight= dm.heightPixels;
        cellWidth= screenWidth / 9;
        setContentView(R.layout.activity_main);
        FrameLayout root_layout = findViewById(R.id.root_layout);
        FrameLayout.LayoutParams params =
                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT);
        GameView gameView = new GameView(this);
        drawX = (float)(screenWidth - cellWidth *9 )/2;
        drawY=cellWidth*4;
        root_layout.addView(gameView);
gameView.setLayoutParams(params);
    }
}
Constants
package com.example.myapplication;

public class Constants {
    public  static int screenWidth;
    public static int screenHeight;
    public static int cellWidth;
    public static float drawX;
    public static float drawY;

}
GameView
package com.example.myapplication;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

import androidx.annotation.NonNull;

public class GameView  extends SurfaceView implements SurfaceHolder.Callback {

private  DrawThread thread;
    public GameView(Context context) {
        super(context);
        getHolder().addCallback(this);
        thread= new DrawThread(this);
    }

    @Override
    public void surfaceCreated(@NonNull SurfaceHolder surfaceHolder) {
thread.setRunning(true);
thread.start();
    }

    @Override
    public void surfaceChanged(@NonNull SurfaceHolder surfaceHolder, int i, int i1, int i2) {

    }

    @Override
    public void surfaceDestroyed(@NonNull SurfaceHolder surfaceHolder) {

    }

    @Override
    public void draw(Canvas canvas) {
        super.draw(canvas);
        canvas.drawColor(Color.RED);
    }
}
activity_main
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity"
    android:id="@+id/root_layout"
    >



</FrameLayout>
DrawThread
package com.example.myapplication;

import android.graphics.Canvas;

public class DrawThread extends Thread {
    private GameView view;
    public boolean running = false;
    public static int fps;
    public static int ups;

    public DrawThread(GameView gameView) {
        this.view = gameView;

    }

    public void setRunning(boolean run) {
        running = run;
    }

    @Override
    public void run() {
        final int MAX_FPS = 60;
        final int MAX_UPS = 60;
//
        final double fOPTIMAL_TIME = (double) 1000000000 / MAX_FPS;
        final double uOPTIMAL_TIME = (double) 1000000000 / MAX_UPS;
        double uDeltaTime = 0, fDeltaTime = 0;
        int frames = 0, updates = 0;
        long startTime = System.nanoTime();
        long timer = System.currentTimeMillis();
        //
        while (running) {
            long currentTime = System.nanoTime();
            uDeltaTime += (currentTime - startTime);
            fDeltaTime += (currentTime - startTime);
            startTime = currentTime;

            if (uDeltaTime >= uOPTIMAL_TIME) {
                //
                updates ++;
                uDeltaTime -= uOPTIMAL_TIME;

            }
            if(fDeltaTime> fOPTIMAL_TIME){
                Canvas canvas= view.getHolder().lockCanvas(null);
                if(canvas!= null){
                    synchronized ( view.getHolder()){
                        view.draw(canvas);
                    }
                    view.getHolder().unlockCanvasAndPost(canvas);
                }
                frames++;
                fDeltaTime -= fOPTIMAL_TIME;
            }
            if(System.currentTimeMillis() - timer>= 1000){}
            fps = frames;
            ups= updates;
            updates = 0;
            frames = 0;
            timer += 100;

        }

    }
}

